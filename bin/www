#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

let io = require('socket.io')(server);


io.on('connection', function(socket){
    console.log('a user connected');

    console.log(socket.id);

          var number = Math.random()*99 + 1;
          number = parseInt(number, 10);
          io.emit('num', {
        msg: number
      })

io.emit('server message', {msg:'client connect server success'});

    socket.on("clientmessage/1234", function(obj) {
      console.log(obj);
    });

    socket.on("admin", function (obj) {
      console.log(obj);

      let client = 'client/' + obj.msg.userid;

      console.log(client);

      io.emit(client, {msg:obj.msg.content});


          // let num = 1500-800 = 700
          // Math.random()*700
          var number = Math.random()*109 + 1;
          number = parseInt(number, 10);

          console.log(number);

      io.emit('num', {
        msg: number
      })

    })






})

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
